"""
Parses a SQL script generated by `pg_dump` and replaces all integer primary keys of name "id" with bigints, taking
care of all of their foreign keys as well.

This only works properly for database layouts generated by Django, since it does not support all PostgreSQL
features.

Usage:

    convert.py schema.sql > schema_bigint.sql
"""
import re
import sys

import sqlparse
from sqlparse import tokens as T
from sqlparse.sql import Identifier, Token, Function, Parenthesis, IdentifierList

with open(sys.argv[1], 'r') as input_f:
    statements = sqlparse.parse(input_f.read())

# Map of all (table, field) tuples with integer type to their type token
field_name_to_type_token = {}

# Map of all integer sequence names to their type tokens
sequence_name_to_type_token = {}

# Map of all sequence names to the (table, field) tuple they are used by (assumes only one field uses them)
sequence_name_to_field_name = {}

# Map of all foreign keys (table, field) to the (table, field) they refer to
foreign_key_to_target = {}

# Loop over statements and fill maps
for s in statements:
    statement_type = s.get_type()

    idx, verb = s.token_next(0, True, True)

    if str(verb) == 'CREATE':
        idx, verb_type = s.token_next(idx, True, True)

        if str(verb_type) == 'TABLE':
            idx, table_name = s.token_next(idx, True, True)
            idx, field_list = s.token_next(idx, True, True)

            current_field_name = None
            for token in field_list:
                if isinstance(token, Identifier):
                    current_field_name = str(token)
                elif isinstance(token, IdentifierList):
                    current_field_name = str(list(token.get_identifiers())[-1])
                elif isinstance(token, Token) and token.ttype == T.Name.Builtin and str(token) == 'integer':
                    field_name_to_type_token[str(table_name), current_field_name] = token


        elif str(verb_type) == 'SEQUENCE':
            idx, seq_name_token = s.token_next(idx, True, True)
            seq_name = ''
            for tk in seq_name_token:
                if tk.ttype == T.Whitespace:
                    break
                seq_name += str(tk)

            if str(seq_name_token.tokens[-1]) == 'integer':
                sequence_name_to_type_token[seq_name.strip()] = seq_name_token.tokens[-1]

    elif str(verb) == 'ALTER':
        idx, verb_type = s.token_next(idx, True, True)

        if str(verb_type) == 'TABLE':
            table_name = None
            column_name = None
            is_column_change = False
            is_foreign_key = False
            is_foreign_key_ref = False
            foreign_key_name = None
            while True:
                idx, token = s.token_next(idx, True, True)
                if idx is None:
                    break
                if isinstance(token, Identifier) and table_name is None:
                    table_name = str(token)
                elif isinstance(token, Identifier) and column_name is None and is_column_change:
                    column_name = str(token)
                elif str(token) == "COLUMN":
                    is_column_change = True
                elif str(token) == "FOREIGN":
                    is_foreign_key = True
                elif str(token) == "REFERENCES":
                    is_foreign_key_ref = True
                elif isinstance(token, Function) and token.get_real_name() == "nextval":
                    seq_name = str(token.get_parameters()[0]).split('::')[0].strip("'")
                    sequence_name_to_field_name[seq_name] = (table_name, column_name)
                elif is_foreign_key and isinstance(token, Parenthesis) and not foreign_key_name:
                    foreign_key_name = str(token.tokens[1])
                elif is_foreign_key_ref and isinstance(token, Identifier):
                    m = re.match(r'(.*)\((.*)\)', str(token))
                    foreign_key_to_target[table_name, foreign_key_name] = (m.group(1), m.group(2))

for seq_name, seq_type_token in sequence_name_to_type_token.items():
    # Change the sequence to bigint
    seq_type_token.value = 'bigint'

    # Change the field the sequence is stored in to bigint
    field = sequence_name_to_field_name[seq_name]
    field_name_to_type_token[field].value = 'bigint'

    # Change all foreign keys pointing to that sequence to bigint
    for src, tgt in foreign_key_to_target.items():
        if tgt == field:
            field_name_to_type_token[src].value = 'bigint'

for s in statements:
    print(s, end="")
